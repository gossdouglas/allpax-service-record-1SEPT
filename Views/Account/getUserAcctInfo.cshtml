@model allpax_service_record.Models.RegisterViewModel
@using Microsoft.AspNet.Identity
@*@model allpax_service_record.Models.View_Models.vm_userAcctInfo*@
@{
    ViewBag.Title = "Register";
}

<head>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-beta.1/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/underscore@1.11.0/underscore-min.js"></script>

    <style>

        .admin_div, .active_div {
            text-align: center
        }

        /*AN INVISIBLE HORIZONTAL SPACE*/
        .sectionSeparator {
            margin: 1px;
            opacity: 0;
        }

        table {
            table-layout: auto !important;
        }

        thead th, tbody td, tfoot td, tfoot th {
            /*width: auto !important;*/
            white-space: nowrap;
        }

        th.th_fullName, th.th_shortName, th.th_userName {
            width: 10%;
        }

        th.th_email {
            width: 15%;
        }

        th.th_admin, th.th_active, th.th_action {
            width: 5%;
        }

        #userData_container {
            position: relative;
            width: 80%;
            margin: 0 auto;
            height: calc(100vh - 150px);
            overflow: auto;
        }

        /*/*BEGIN CHANGE LAYOUT FOR MOBILE*/
        @@media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px) {

            #userData_container {
                width: 100%;
            }
            /* Force table to not be like tables anymore */
            table, thead, tbody, th, td, tr {
                display: block;
            }
                /* Hide table headers (but not display: none;, for accessibility) */
                thead tr {
                    position: absolute;
                    top: -9999px;
                    left: -9999px;
                }

            tr {
                border: 1px solid #ccc;
            }

            td {
                /* Behave  like a "row" */
                border: none;
                border-bottom: 1px solid #eee;
                position: relative;
                padding-left: 50%;
            }

                td:before {
                    /* Now like a table header */
                    position: absolute;
                    /* Top/left values mimic padding */
                    top: 6px;
                    left: 6px;
                    width: 45%;
                    padding-right: 10px;
                    white-space: nowrap;
                }
            /*END CHANGE LAYOUT FOR MOBILE*/
        }
    </style>
    <script>
        $(document).ready(function () {//begin document read jquery statements

            //////////////////BEGIN THE COMMON NEW USER AND EDIT USER MODAL SECTION

            //////////////////END THE COMMON NEW USER AND EDIT USER MODAL SECTION

            //////////////////BEGIN THE NEW USER MODAL SECTION

            //reset the new job modal for new inputs
            function fn_resetModalForm(modalID) {

                var allTextInputs = $(modalID).find("input:text");
                var allPasswordInputs = $(modalID).find("input:password");
                var allCheckInputs = $(modalID).find("input:checkbox");

                $(allTextInputs).val('');//reset text boxes
                $(allPasswordInputs).val('');//reset text boxes
                $(allCheckInputs).prop('checked', false);//reset check boxes
            }

            $('#userNewForm').on('show.bs.modal', function (event) {

                fn_resetModalForm("#userNewForm");//reset the modal for new inputs
            })

            //////////////////END THE NEW USER MODAL SECTION

            //////////////////BEGIN THE EDIT USER MODAL SECTION

            $('#userEditForm').on('show.bs.modal', function (event) {

                var button = $(event.relatedTarget) // Button that triggered the modal
                var temp_aspNetId = button.data('asp-net-id') // Extract info from data-* attributes
                var temp_fullName = button.data('full-name') // Extract info from data-* attributes
                var temp_shortName = button.data('short-name') // Extract info from data-* attributes
                var temp_userName = button.data('user-name') // Extract info from data-* attributes
                var temp_email = button.data('email') // Extract info from data-* attributes
                var temp_admin = button.data('admin') // Extract info from data-* attributes
                var temp_active = button.data('active') // Extract info from data-* attributes

                var modal = $(this)
                modal.find('.modal-title').text('User Edit Form')
                modal.find('.asp-net-id').val(temp_aspNetId)
                modal.find('.full-name').val(temp_fullName)
                modal.find('.short-name').val(temp_shortName)
                modal.find('.user-name').val(temp_userName)
                modal.find('.email').val(temp_email)
                modal.find('.admin').val(temp_admin)
                modal.find('.active').val(temp_active)

                if (temp_admin == "True") {
                    modal.find('.admin').prop('checked', true);
                }
                else {
                    modal.find('.admin').prop('checked', false);
                }

                if (temp_active == "True") {
                    modal.find('.active').prop('checked', true);
                }
                else {
                    modal.find('.active').prop('checked', false);
                }
            })

            $(".userEditForm.btn_save").click(function () {

                //if all inputs for this modal are valid...
                if (fn_modalValidate($(this))) {

                    var modal = $(this).parent().parent();
                    var temp_aspNetId = modal.find('.asp-net-id').val()
                    var temp_fullName = modal.find('.full-name').val()
                    var temp_shortName = modal.find('.short-name').val()
                    var temp_userName = modal.find('.user-name').val()
                    var temp_email = modal.find('.email').val()
                    var temp_password = modal.find('.password').val()
                    var temp_passwordConfirm = modal.find('.passwordConfirm').val()
                    var temp_admin = modal.find('.admin').prop('checked')
                    var temp_active = modal.find('.active').prop('checked')

                    var data = {
                        aspNetId: temp_aspNetId,
                        name: temp_fullName,
                        ShortName: temp_shortName,
                        UserName: temp_userName,
                        Password: temp_password,
                        ConfirmPassword: temp_passwordConfirm,
                        Email: temp_email,
                        admin: temp_admin,
                        active: temp_active
                    };

                    fn_showSpinner();//display the spinner to demonstrate an operation is underway
                    $.ajax({
                        url: '/Account/UpdateUserAcctInfo',
                        method: 'post',
                        contentType: 'application/json',
                        dataType: 'json',
                        data: JSON.stringify(data),
                        traditional: true,
                        //if successful, redirect the page returned by the controller
                        success: function (response) {
                            window.location.href = response;
                        },
                        //if un-successful...
                        error: function (response) {
                            fn_hideSpinner();//hide the spinner

                            //build an error string based on the error returned from the controller...
                            var alertContent = "An error has occurred.";

                            //and display that error in an alert box
                            $.alert({
                                title: 'Alert!',
                                content: alertContent,
                            });

                            //console.log("an error!");
                            ////console.log(response);
                            //$(response).each(function (index, item) {

                            //    //var modelErrors = item.ModelErrors
                            //    //console.log(item.name)
                            //    //console.log(item.Email)
                            //    //console.log(item.ModelErrors)
                            //    console.log(item.name)
                            //});
                        }
                    });
                }
            });

            $(".userEditForm.btn_delete").click(function () {
                console.clear();
                console.log("Modal delete pressed.")

                var modal = $(this).parent().parent().parent();

                var temp_aspNetId = modal.find('.asp-net-id').val()
                var temp_userName = modal.find('.user-name').val()

                var data = {
                    aspNetId: temp_aspNetId,
                };

                $.confirm({
                    title: 'Delete User ' + temp_userName + '?',
                    content: '',
                    buttons: {
                        confirm: function () {
                            fn_showSpinner();
                            $.ajax({
                                url: '/Account/DeleteUserAcctInfo',
                                method: 'post',
                                contentType: 'application/json',
                                dataType: 'json',
                                data: JSON.stringify(data),
                                traditional: true,
                                success: function (response) {
                                    window.location.href = response;
                                }
                            });
                        },
                        cancel: function () {
                        }
                    }
                });
            });

            //////////////////END THE EDIT USER MODAL SECTION

            //////////////////BEGIN RETURNED RECORDS SECTION

            $(".returnedRecords .Btn_delete").click(function () {
                console.clear();

                var currentRow = $(this).parent().parent();
                var temp_aspNetId = currentRow.find('.aspNetId_div').html()
                var temp_userName = currentRow.find('.userName_div').html()

                //console.log("Delete button was pressed.")
                //console.log("temp_aspNetId: " + temp_aspNetId)

                var data = {
                    aspNetId: temp_aspNetId,
                };

                $.confirm({
                    title: 'Delete User ' + temp_userName + '?',
                    content: '',
                    buttons: {
                        confirm: function () {
                            fn_showSpinner();
                            $.ajax({
                                url: '/Account/DeleteUserAcctInfo',
                                method: 'post',
                                contentType: 'application/json',
                                dataType: 'json',
                                data: JSON.stringify(data),
                                traditional: true,
                                //if successful, redirect the page returned by the controller
                                success: function (response) {
                                    window.location.href = response;
                                },
                                //if un-successful...
                                error: function (response) {
                                    fn_hideSpinner();//hide the spinner

                                    //build an error string based on the error returned from the controller...
                                    var alertContent = "An error has occurred.";

                                    //and display that error in an alert box
                                    $.alert({
                                        title: 'Alert!',
                                        content: alertContent,
                                    });
                                }
                            });
                        },
                        cancel: function () {
                        }
                    }
                });

            });

            //set the bottom border of the last row of returned records
            $(".returnedRecords:last div").css('border-bottom', 'solid 1px black');

            //////////////////END RETURNED RECORDS SECTION

            //////////////////BEGIN MISCELLANEOUS SECTION

            function fn_showSpinner() {
                $.LoadingOverlay("show", {
                    image: "",
                    fontawesome: "fa fa-cog fa-spin"
                });

                //$('#saveAndExit_btn, #saveAndSubmit_btn').attr('disabled', 'disabled');
            }

            function fn_hideSpinner() {
                $.LoadingOverlay("hide");
            }

            function fn_modalValidate(button) {
                var currentRow = button.parent().parent();
                var modalValid = true;
                var temp_fullName = currentRow.find(".full-name").val();
                var temp_shortName = currentRow.find(".short-name").val();
                var temp_userName = currentRow.find(".user-name").val();
                var temp_email = currentRow.find(".email").val();

                console.log(temp_fullName)
                console.log(temp_shortName)
                console.log(temp_userName)
                console.log(temp_userName)
                console.log(temp_email)

                //var temp_descriptionMatch = temp_description.match(/(.*[A-Z]){3,}/);//maches the form three or more letters

                //if (temp_description.length < 1) {
                //    $.alert({
                //        title: 'Error!',
                //        content: 'Sub-job description must not be empty.',
                //    });
                //    modalValid = false;
                //    return modalValid;
                //}

                return modalValid;
            }

            $('.short-name').keyup(function () {
                $(this).val($(this).val().toUpperCase());
            });

            //////////////////END MISCELLANEOUS SECTION

        });//end document read jquery statements
    </script>
</head>

@*BEGIN USER SECTION*@
<hr class="sectionSeparator">
<div class="col-12" style="padding:0px;">
    <span><strong>Add a New User</strong></span>
    <span>
        <button class="btn btn-light btn-sm" data-toggle="modal" data-target="#userNewForm">
            <i class="far fa-plus-square fa-2x" style="color:black;"></i>
        </button>
    </span>
</div>
<hr class="sectionSeparator">
@*<div class="container-md" id="userData_container" style="overflow:auto; height: calc(100vh - 150px)">*@
<div class="" id="userData_container">
    <div class="table-responsive">
        <table id="dt_dailyRptAll" class="table table-striped table-bordered" style="width:100%">
            <thead>
                <tr>
                    <th class="th_fullName">
                        <span>Full Name</span>
                    </th>
                    <th class="th_shortName">
                        Short Name
                    </th>
                    <th class="th_userName">
                        User Name
                    </th>
                    <th class="th_email">
                        E-mail
                    </th>
                    <th class="th_admin">
                        Admin
                    </th>
                    <th class="th_active">
                        Active
                    </th>
                    <th class="th_action">
                        Action
                    </th>
                </tr>
            </thead>
            <tbody>
                @*BEGIN RETURNED RECORDS*@
                @foreach (var item in Model.userAcctInfo)
                {
                    //BEGIN TEMPORARY LOOP VARIABLES
                    string temp_aspNetId = item.aspNetId;
                    string temp_name = item.name;
                    string temp_shortName = item.ShortName;
                    string temp_userName = item.UserName;
                    string temp_email = item.Email;
                    bool temp_admin = item.admin;
                    bool temp_active = item.active;
                    //END TEMPORARY LOOP VARIABLES

                <tr class="returnedRecords" id="" data-time-Entry-ID="" style="">
                    <td class="aspNetId_div" hidden>@temp_aspNetId</td>
                    <td class="block fullName_div">@temp_name</td>
                    <td class="shortName_div">@temp_shortName</td>
                    <td class="userName_div">@temp_userName</td>
                    <td class="email_div">@temp_email</td>

                    <td class="admin_div">
                        @if (temp_admin)
                        {
                            <i class="fas fa-check-circle fa-2x" style="color:lawngreen;"></i>
                        }
                        else
                        {
                            <i class="fas fa-check-circle fa-2x" style="color:red;"></i>
                        }
                    </td>
                    <td class="active_div">
                        @if (temp_active)
                        {
                            <i class="fas fa-check-circle fa-2x" style="color:lawngreen;"></i>
                        }
                        else
                        {
                            <i class="fas fa-check-circle fa-2x" style="color:red;"></i>
                        }
                    </td>

                    @if ((@temp_userName == "admin") || (@temp_userName == @User.Identity.GetUserName()))
                    {
                        <td class="button_div" style="padding:0px;">
                            <button class="btn btn-light btn-sm Btn_edit" data-toggle="modal" data-target="#userEditForm" data-asp-net-id="@temp_aspNetId" data-full-name="@temp_name"
                                    data-short-name="@temp_shortName" data-user-name="@temp_userName" data-email="@temp_email" data-admin="@temp_admin" data-active="@temp_active" disabled>
                                <i class="far fa-edit fa-2x" style="color:black;">
                                </i>
                            </button>
                            <button class="btn btn-light btn-sm Btn_delete" disabled><i class="far fa-minus-square fa-2x" style="color: black;"></i></button>
                        </td>
                    }
                    @if ((@temp_userName != "admin") && (@temp_userName != @User.Identity.GetUserName()))
                    {
                        <td class="button_div" style="padding:0px;">
                            <button class="btn btn-light btn-sm Btn_edit" data-toggle="modal" data-target="#userEditForm" data-asp-net-id="@temp_aspNetId" data-full-name="@temp_name"
                                    data-short-name="@temp_shortName" data-user-name="@temp_userName" data-email="@temp_email" data-admin="@temp_admin" data-active="@temp_active">
                                <i class="far fa-edit fa-2x" style="color:black;">
                                </i>
                            </button>
                            <button class="btn btn-light btn-sm Btn_delete"><i class="far fa-minus-square fa-2x" style="color: black;"></i></button>
                        </td>
                    }
                </tr>
                }
                @*END RETURNED RECORDS*@
            </tbody>
        </table>
    </div>

    @*END RETURNED RECORDS*@

    @*BEGIN EDIT USER MODAL TEMPLATE*@
    @using (Html.BeginForm("UpdateUserAcctInfo", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        <div class="modal fade" id="userEditForm" tabindex="-1" role="dialog" aria-labelledby="userEditForm" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <div class="float-left">
                            <h5 class="modal-title" id="userEditForm">Edit user</h5>
                        </div>
                        <div class="float-none">
                            <button type="button" class="btn btn-light btn-sm userEditForm" data-toggle="modal" data-target="#userNewForm"><i class="far fa-plus-square fa-2x" style="color:black;"></i></button>
                            <button type="button" class="btn btn-light btn-sm userEditForm btn_delete"><i class="far fa-minus-square fa-2x" style="color: black;"></i></button>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                    </div>
                    <div class="modal-body">
                        <form>
                            @Html.AntiForgeryToken()
                            @*@Html.ValidationSummary("", new { @class = "text-danger" })*@
                            <div class="validation-summary-valid text-danger" data-valmsg-summary="true">
                                @*@Model.userAcctInfo.Count*@
                                @*@Model.userAcctInfo.FirstOrDefault().ModelErrors.Count*@
                            </div>
                            <div class="form-group">
                                <div class="row">
                                    <label for="asp-net-id" class="col-form-label" hidden>ASP.net ID:</label>
                                    <input type="text" class="form-control asp-net-id" hidden>
                                    <div class="col-6">
                                        <label for="full-name" class="col-form-label">Full Name:</label>
                                        <input type="text" class="form-control full-name" maxlength="50">
                                        @*@Html.TextBoxFor(m => m.name, new { @class = "form-control full-name", @maxlength = "50" })*@
                                    </div>
                                    <div class="col-6">
                                        <label for="short-name" class="col-form-label">Short Name:</label>
                                        <input type="text" class="form-control short-name" maxlength="2">
                                        @*@Html.TextBoxFor(m => m.ShortName, new { @class = "form-control short-name", @maxlength = "2" })*@
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <label for="user-name" class="col-form-label">User Name:</label>
                                        <input type="text" class="form-control user-name" maxlength="16">
                                        @*@Html.TextBoxFor(m => m.UserName, new { @class = "form-control user-name", @maxlength = "16" })*@
                                    </div>
                                    <div class="col-6">
                                        <label for="email" class="col-form-label">E-mail:</label>
                                        <input type="text" class="form-control email">
                                        @*@Html.TextBoxFor(m => m.Email, new { @class = "form-control email" })*@
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <label for="user-name" class="col-form-label">Password:</label>
                                        @Html.PasswordFor(m => m.Password, new { @class = "form-control password", @maxlength = "16" })
                                    </div>
                                    <div class="col-6">
                                        <label for="email" class="col-form-label">Confirm Password:</label>
                                        @*<input type="text" class="form-control email">*@
                                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control passwordConfirm", @maxlength = "16" })
                                    </div>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input admin" type="checkbox" value="">
                                    @*@Html.CheckBoxFor(m => m.admin)*@
                                    <label class="form-check-label" for="">
                                        Administrator
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    <input class="form-check-input active" type="checkbox" value="">
                                    @*@Html.CheckBoxFor(m => m.active)*@
                                    <label class="form-check-label" for="">
                                        Active
                                    </label>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn userEditForm btn_save" value="">Save</button>
                        <button type="button" class="btn btn_cancel" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @*END EDIT USER MODAL TEMPLATE*@

    @*BEGIN NEW USER MODAL TEMPLATE*@
    @using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        <div class="modal fade" id="userNewForm" tabindex="-1" role="dialog" aria-labelledby="userNewForm" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="userNewForm">Add User</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary("", new { @class = "text-danger" })
                            <div class="form-group">
                                <div class="row">
                                    <div class="col-6">
                                        <label for="full-name" class="col-form-label">Full Name:</label>
                                        @*<input type="text" class="form-control full-name">*@
                                        @Html.TextBoxFor(m => m.name, new { @class = "form-control full-name", @maxlength = "50" })
                                    </div>
                                    <div class="col-6">
                                        <label for="short-name" class="col-form-label">Short Name:</label>
                                        @*<input type="text" class="form-control short-name">*@
                                        @Html.TextBoxFor(m => m.ShortName, new { @class = "form-control short-name", @maxlength = "2" })
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-6">
                                        <label for="user-name" class="col-form-label">User Name:</label>
                                        @*<input type="text" class="form-control user-name">*@
                                        @Html.TextBoxFor(m => m.UserName, new { @class = "form-control user-name", @maxlength = "16" })
                                    </div>
                                    <div class="col-6">
                                        <label for="email" class="col-form-label">E-mail:</label>
                                        @*<input type="text" class="form-control email">*@
                                        @Html.TextBoxFor(m => m.Email, new { @class = "form-control email" })
                                    </div>
                                </div>
                                <div class="form-check form-check-inline">
                                    @Html.CheckBoxFor(m => m.admin)
                                    <label class="form-check-label" for="">
                                        Administrator
                                    </label>
                                </div>
                                <div class="form-check form-check-inline">
                                    @Html.CheckBoxFor(m => m.active)
                                    <label class="form-check-label" for="">
                                        Active
                                    </label>
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn userNewForm btn_save" value="Register">Save</button>
                        <button type="button" class="btn btn_cancel" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
    @*END NEW USER MODAL TEMPLATE*@

</div>
@*END USER SECTION*@

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
